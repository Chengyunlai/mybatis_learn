<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="top.chengyunlai.mapper.UserMapper">

    <!--多对一的查询-->
    <resultMap id="userMap" type="user">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
        <result property="birthday" column="birthday"/>
        <!--封装的是一个类-->
        <association property="department" javaType="department">
            <id property="id" column="department_id"/>
            <result property="name" column="department_name"/>
            <result property="tel" column="tel"></result>
        </association>
    </resultMap>

    <resultMap id="userlazy" type="user">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
        <result property="birthday" column="birthday"/>
        <association property="department" javaType="department"
                     select="top.chengyunlai.mapper.DepartmentMapper.findById" column="department_id"/>
    </resultMap>

    <!--类型处理器-->
    <resultMap id="userHandlerMap" type="user">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
        <result property="birthday" column="birthday"/>
        <association property="department" javaType="department">
            <id property="id" column="department_id"></id>
        </association>
    </resultMap>

    <!--直接引用-->
    <resultMap id="userMapDire" type="user">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
        <result property="birthday" column="birthday"/>
        <!--封装的是一个类-->
        <association property="department" javaType="department" resultMap="top.chengyunlai.mapper.DepartmentMapper.department">
        </association>
    </resultMap>

    <!--带前缀引用-->
    <resultMap id="userWithPrefix" type="user">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
        <result property="birthday" column="birthday"/>
        <association property="department" javaType="department"
                     resultMap="top.chengyunlai.mapper.DepartmentMapper.department" columnPrefix="department_"/>
    </resultMap>

    <resultMap id="userWithDiscriminator" type="user">
        <discriminator column="deleted" javaType="boolean">
            <case value="false" resultMap="userlazy"/>
            <case value="true" resultType="user"/>
        </discriminator>
    </resultMap>

    <select id="findAll" resultMap="userMap">
        select usr.*, dep.name as department_name,dep.tel
        from tbl_user usr
                 left join tbl_department dep on usr.department_id  = dep.id
    </select>
    <select id="findAllLazy" resultMap="userlazy">
        select * from tbl_user
    </select>

    <select id="findAllByDepartmentId" resultType="user">
        select * from tbl_user where department_id = #{departmentId}
    </select>

    <select id="findAllUseTypeHandler" resultType="user">
        select * from tbl_user
    </select>

    <!--有了 TypeHandler 之后，我们就可以直接把整个 Department 对象传进去了：-->
    <!--<insert id="saveUser" parameterType="user">-->
    <!--    insert into tbl_user (id, name, department_id) VALUES (#{id}, #{name}, #{department})-->
    <!--</insert>-->

    <select id="findAllByDepartmentIdProvider" parameterType="string"
            resultType="user" databaseId="mysql">
        select * from tbl_user where department_id = #{departmentId}
    </select>

    <select id="findAllByDepartmentIdProvider" parameterType="string"
            resultType="user" databaseId="postgresql">
        <!-- 注意这里查的表不一样 -->
        select * from users where department_id = #{departmentId}
    </select>

    <select id="cleanCache" resultType="int" flushCache="true">
        select count(id) from tbl_user
    </select>

    <!--这里的resultMap封装的时候用了其他命名空间的Map，但是是使用columnPrefix定义了前缀的，这个前缀需要在sql语句中指定-->
    <!--它可以在封装结果集时，自动取出 "指定前缀 + column" 的列封装到指定的 resultMap 中-->
    <select id="findAll2" resultMap="userWithPrefix"> <!-- 注意这里的resultMap是上面新定义的 -->
        select usr.*, dep.name as department_name, dep.tel as department_tel
        from tbl_user usr
        left join tbl_department dep on usr.department_id = dep.id
    </select>

    <select id="findAll3" resultMap="userMapDire">
        select usr.*, dep.tel
        from tbl_user usr
        left join tbl_department dep on usr.department_id = dep.id
    </select>

    <!--使用鉴别器,根据某个条件判断去封装成什么类型-->
    <select id="findAllUseDiscriminator" resultMap="userWithDiscriminator">
        select * from tbl_user
    </select>

    <!--if测试的是参数-->
    <!--and写在前面-->
    <select id="findAllUser" parameterType="user" resultMap="userMap">
        select * from tbl_user
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <!-- 借助OGNL直接获取department对象的id属性 -->
            <if test="department != null">
                <if test="department.id != null">
                    and department_id = #{department.id}
                </if>
            </if>
            <!-- 借助OGNL直接调用字符串的trim()方法 -->
            <if test="name != null and name.trim() != ''">
                and name like concat('%', #{name}, '%')
            </if>
            <!-- 包括可以直接调用静态常量、方法，使用运算符等 -->
        </where>
    </select>

    <!--
    prefix ：在整个标签【前面】附加指定内容
    suffix ：在整个标签【最后】追加指定内容

    prefixOverrides ：去掉【标签体内第一个指定】的关键字
    suffixOverrides ：去掉标【签体内最后一个指定】的关键字
    -->
    <select id="findAllUseTrim" parameterType="user" resultMap="userMap">
        select * from tbl_user
        <trim prefix="where">
            <if test="id != null">
                id = #{id}
            </if>
        </trim>
    </select>

    <!--多个条件选择其一-->
    <select id="findByCondition" parameterType="user" resultMap="userMap">
        select * from tbl_user
        <choose>
            <when test="id != null and id != '">
                where id = #{id};
            </when>
            <when test="name != null and name != ''">
                where name = #{name};
            </when>
        </choose>
    </select>

    <select id="findAllUseForeach" parameterType="list" resultType="user">
        select * from tbl_user
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <!--bind类似声明一个变量-->
    <select id="findAllUserUseBind" parameterType="user" resultType="user">
        <bind name="namelike" value="'%' + _parameter.getName() + '%'"/>
        select * from tbl_user
        where name like #{namelike}
    </select>
</mapper>